<?php

/**
 * @file
 * mp_state_machine main module file.
 */

include_once 'mp_state_machine.info.inc';
include_once 'includes/mp_state_machine.states.inc';

/**
 * Implements hook_views_api().
 */
function mp_state_machine_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mp_state_machine') . '/includes/views',
  );
}

/**
 * Implements hook_entity_load();
 */
function mp_state_machine_entity_load($entities, $entity_type) {
  $entity_type_state_types = mp_state_machine_entity_type_state_types();
  if (in_array($entity_type, array_keys($entity_type_state_types))) {
    if ($state_types = $entity_type_state_types[$entity_type]) {
      foreach (array_keys($state_types) as $state_type) {
        foreach ($entities as &$entity) {
          $state_machine = mp_state_machine_load($entity_type, $entity, $state_type);
          $entity->$state_type = $state_machine->get_current_state();
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function mp_state_machine_entity_insert($entity, $entity_type) {
  // When a new entity supporting states is created, populate the state
  // database table with values for each of its states.
  $entity_type_state_types = mp_state_machine_entity_type_state_types();
  if (in_array($entity_type, array_keys($entity_type_state_types))) {
    if ($state_types = $entity_type_state_types[$entity_type]) {
      foreach (array_keys($state_types) as $state_type) {
        $state_machine = mp_state_machine_load($entity_type, $entity, $state_type);
        $state_machine->persist();
      }
    }
  }

  // When creating a new order, set its line items' checkout_state values
  // to the same values as order's checkout_state.
  if ($entity_type == 'commerce_order') {
    if (!empty($entity->commerce_line_items)) {
      $wrapper = entity_metadata_wrapper('commerce_order', $entity);
      foreach ($wrapper->commerce_line_items as $line_item_wrapper) {
        $line_item_state_machine = mp_state_machine_load('commerce_line_item', $line_item_wrapper->value(), MP_STATE_MACHINE_CHECKOUT_STATE);
        // As the order should have a new revision just created, we do not
        // want to create new revisions for it for each updated line item.
        $line_item_state_machine->set_create_new_revisions(FALSE);
        $line_item_state_machine->set_create_new_order_revisions(FALSE);
        $event_name = 'to_' . $entity->status;
        $line_item_state_machine->fire_event($event_name);
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function mp_state_machine_entity_update($entity, $entity_type) {
  // If order status was changed, let's update its state machine too.
  if ($entity_type == 'commerce_order' && $entity->status != $entity->original->status) {
    mp_state_machine_order_state_update($entity);
  }
  elseif (mp_state_machine_entity_type_supports_revisions($entity_type)) {
    mp_state_machine_entity_state_persist($entity_type, $entity);
  }
}

/**
 * Update order state machine if order status has been updated.
 *
 * @param object $order
 *   An order which has just been updated.
 *
 * @see mp_state_machine_entity_insert()
 * @see mp_state_machine_entity_update()
 */
function mp_state_machine_order_state_update($order) {
  $state_machine = mp_state_machine_load('commerce_order', $order, MP_STATE_MACHINE_CHECKOUT_STATE);

  // Update order state.
  $event_name = 'to_' . $order->status;
  $state_machine->fire_event($event_name);
}

/**
 * Persist order state machine if order status has not been updated.
 *
 * @param object $order
 *   An order which has just been updated.
 *
 * @see mp_state_machine_entity_insert()
 * @see mp_state_machine_entity_update()
 */
function mp_state_machine_entity_state_persist($entity_type, $entity) {
  // If a new order revision was created, but order status was not changed,
  // let's just persist all order states, to save a new entry for each state
  // in the database with the new order revision_id.
  $entity_type_state_types = mp_state_machine_entity_type_state_types();
  if (!empty($entity_type_state_types[$entity_type])) {
    foreach (array_keys($entity_type_state_types[$entity_type]) as $state_type) {
      $state_machine = mp_state_machine_load($entity_type, $entity, $state_type);
      $state_machine->persist();
    }
  }
}

/**
 * Inform external systems about a workflow transition.
 *
 * @param \MPStateFlow $state_machine
 *   A state machine object used to fire the event.
 * @param string $event_key
 *   A name of the event that has just been fired.
 * @param string $log
 *   A log message for the event that has just been fired.
 *
 * @see MPStateFlow::fire_event()
 */
function mp_state_machine_invoke_event_handlers(MPStateFlow $state_machine, $event_key, $log) {
  // Load related objects.
  $entity_type = $state_machine->get_entity_type();
  $entity = entity_load_single($entity_type, $state_machine->get_entity_id());

  if (is_object($entity)) {
    $state_type = $state_machine->get_state_type();
    $state = $state_machine->get_current_state();

    // Invoke the Rules state_flow_event_fired event.
    if (module_exists('rules')) {
      rules_invoke_event('mp_state_machine_event_fired', $entity_type, $entity, $state_type, $state, $event_key, $log);
    }

    module_invoke_all('mp_state_machine_event_fired', $entity_type, $entity, $state_type, $state, $event_key, $log);
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Displays order states on the admin order view page.
 *
 * @see mp_entities_preprocess_entity_property()
 */
function mp_state_machine_commerce_order_view_alter(&$build) {
  // Add MP State Machine states.
  $entity_type_state_types = mp_state_machine_entity_type_state_types();
  if (!empty($entity_type_state_types['commerce_order'])) {
    foreach ($entity_type_state_types['commerce_order'] as $state_type_name => $state_type_info) {
      $build['mp_state_machine_' . $state_type_name] = array(
        '#theme' => 'entity_property',
        '#label_hidden' => FALSE,
        '#label' => $state_type_info['label'],
        '#title_attributes' => array('abc' => 'cba'),
        '#entity_type' => 'commerce_order',
        '#entity_wrapped' => entity_metadata_wrapper('commerce_order', $build['#entity']),
        '#property_name' => $state_type_name,
        '#weight' => -6,
      );
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for theme_entity_property().
 *
 * @see mp_entities_commerce_order_view_alter()
 */
function mp_state_machine_preprocess_entity_property(&$variables, $hook) {
  // Add field classes to make labels bold.
  $variables['attributes_array']['class'][] = 'field';
  $variables['title_attributes_array']['class'][] = 'field-label';
}

/**
 * Returns a boolean indicating whether an entity type supports revisions.
 *
 * @param string $entity_type
 *   An entity type to check for the revision support.
 *
 * @return bool
 *   A boolean indicating whether an entity type supports revisions or not.
 */
function mp_state_machine_entity_type_supports_revisions($entity_type) {
  $info = entity_get_info($entity_type);
  return (!empty($info['entity keys']['revision'])) ? TRUE : FALSE;
}
